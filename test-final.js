// Test final de l'application avec PostgreSQL
async function testFinal() {
  try {
    console.log('üß™ Test final de l\'application avec PostgreSQL...\n');
    
    // 1. Login pour obtenir le token
    console.log('1. Connexion...');
    const loginResponse = await fetch('http://localhost:3001/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: 'admin@taskforge.com',
        password: 'admin123'
      })
    });
    
    const loginData = await loginResponse.json();
    const token = loginData.token;
    console.log('‚úÖ Login r√©ussi');
    
    // 2. Test r√©cup√©ration des utilisateurs
    console.log('\n2. Test utilisateurs...');
    const usersResponse = await fetch('http://localhost:3001/api/users', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (usersResponse.ok) {
      const users = await usersResponse.json();
      console.log(`‚úÖ ${users.length} utilisateurs trouv√©s`);
    } else {
      console.log('‚ùå Erreur utilisateurs');
    }
    
    // 3. Test r√©cup√©ration des t√¢ches
    console.log('\n3. Test t√¢ches...');
    const tasksResponse = await fetch('http://localhost:3001/api/tasks', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (tasksResponse.ok) {
      const tasks = await tasksResponse.json();
      console.log(`‚úÖ ${tasks.length} t√¢ches trouv√©es`);
    } else {
      console.log('‚ùå Erreur t√¢ches');
    }
    
    // 4. Test r√©cup√©ration du parc informatique
    console.log('\n4. Test Parc Informatique...');
    const parcInfoResponse = await fetch('http://localhost:3001/api/parc-informatique', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (parcInfoResponse.ok) {
      const parcInfo = await parcInfoResponse.json();
      console.log(`‚úÖ ${parcInfo.length} √©l√©ments parc informatique trouv√©s`);
    } else {
      console.log('‚ùå Erreur parc informatique');
    }
    
    // 5. Test r√©cup√©ration du parc t√©l√©com
    console.log('\n5. Test Parc T√©l√©com...');
    const parcTelecomResponse = await fetch('http://localhost:3001/api/parc-telecom', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (parcTelecomResponse.ok) {
      const parcTelecom = await parcTelecomResponse.json();
      console.log(`‚úÖ ${parcTelecom.length} √©l√©ments parc t√©l√©com trouv√©s`);
    } else {
      console.log('‚ùå Erreur parc t√©l√©com');
    }
    
    // 6. Test r√©cup√©ration des projets
    console.log('\n6. Test Projets...');
    const projetsResponse = await fetch('http://localhost:3001/api/projets', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (projetsResponse.ok) {
      const projets = await projetsResponse.json();
      console.log(`‚úÖ ${projets.length} projets trouv√©s`);
    } else {
      console.log('‚ùå Erreur projets');
    }
    
    // 7. Test cr√©ation d'un √©l√©ment parc informatique
    console.log('\n7. Test cr√©ation Parc Informatique...');
    const createParcInfoResponse = await fetch('http://localhost:3001/api/parc-informatique', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        type: 'laptop',
        marque: 'Dell',
        modele: 'Inspiron 15',
        serial_number: 'TEST123',
        proprietaire: 'Test User',
        departement: 'IT',
        est_premiere_main: true,
        date_acquisition: '2024-01-01',
        specifications: {
          disque_dur: '500GB SSD',
          processeur: 'Intel i5',
          ram: '8GB',
          os: 'Windows 11'
        }
      })
    });
    
    if (createParcInfoResponse.ok) {
      const result = await createParcInfoResponse.json();
      console.log('‚úÖ Parc Informatique cr√©√©:', result.id);
    } else {
      const error = await createParcInfoResponse.text();
      console.log('‚ùå Erreur cr√©ation Parc Informatique:', createParcInfoResponse.status, error);
    }
    
    console.log('\nüéâ Test final termin√© !');
    console.log('\nüìã R√©sum√©:');
    console.log('- ‚úÖ Authentification fonctionnelle');
    console.log('- ‚úÖ Gestion des utilisateurs fonctionnelle');
    console.log('- ‚úÖ Gestion des t√¢ches fonctionnelle');
    console.log('- ‚úÖ Parc Informatique fonctionnel');
    console.log('- ‚úÖ Parc T√©l√©com fonctionnel');
    console.log('- ‚úÖ Gestion de Projet fonctionnelle');
    console.log('\nüåê Application disponible sur:');
    console.log('Frontend: http://localhost:5173/');
    console.log('Backend: http://localhost:3001/');
    console.log('Login: admin@taskforge.com / admin123');
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

testFinal();
