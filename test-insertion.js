// Script de test pour v√©rifier l'insertion automatique dans la base de donn√©es
import fetch from 'node-fetch';

const API_BASE = 'http://localhost:3001/api';

async function testInsertion() {
  console.log('üß™ Test d\'insertion automatique dans la base de donn√©es...\n');
  
  try {
    // Test 1: Parc Informatique
    console.log('üì± Test Parc Informatique...');
    const parcInfoData = {
      type: 'laptop',
      marque: 'Dell',
      modele: 'Inspiron 15',
      serial_number: 'DL123456789',
      specifications: {
        disque_dur: '512GB SSD',
        processeur: 'Intel i5',
        ram: '8GB',
        os: 'Windows 11'
      },
      proprietaire: 'Ahmed Benali',
      departement: 'IT',
      est_premiere_main: true,
      date_acquisition: '2023-01-15'
    };
    
    const parcInfoResponse = await fetch(`${API_BASE}/parc-informatique`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer test-token' // Token de test
      },
      body: JSON.stringify(parcInfoData)
    });
    
    if (parcInfoResponse.ok) {
      const result = await parcInfoResponse.json();
      console.log('‚úÖ Parc Informatique: Donn√©es ins√©r√©es avec succ√®s (ID:', result.id, ')');
    } else {
      console.log('‚ùå Parc Informatique: Erreur', parcInfoResponse.status);
    }
    
    // Test 2: Parc T√©l√©com
    console.log('\nüìû Test Parc T√©l√©com...');
    const parcTelecomData = {
      numero_puce: '212612345678',
      operateur: 'iam',
      proprietaire: 'Fatima Alami',
      departement: 'Ventes',
      specifications: {
        forfait: '20GB',
        type: 'Data'
      }
    };
    
    const parcTelecomResponse = await fetch(`${API_BASE}/parc-telecom`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer test-token'
      },
      body: JSON.stringify(parcTelecomData)
    });
    
    if (parcTelecomResponse.ok) {
      const result = await parcTelecomResponse.json();
      console.log('‚úÖ Parc T√©l√©com: Donn√©es ins√©r√©es avec succ√®s (ID:', result.id, ')');
    } else {
      console.log('‚ùå Parc T√©l√©com: Erreur', parcTelecomResponse.status);
    }
    
    // Test 3: V√©rification des donn√©es dans la base
    console.log('\nüîç V√©rification des donn√©es dans la base...');
    
    const checkParcInfo = await fetch(`${API_BASE}/parc-informatique`);
    if (checkParcInfo.ok) {
      const data = await checkParcInfo.json();
      console.log(`‚úÖ Parc Informatique: ${data.length} √©l√©ments trouv√©s dans la base`);
    }
    
    const checkParcTelecom = await fetch(`${API_BASE}/parc-telecom`);
    if (checkParcTelecom.ok) {
      const data = await checkParcTelecom.json();
      console.log(`‚úÖ Parc T√©l√©com: ${data.length} √©l√©ments trouv√©s dans la base`);
    }
    
    console.log('\nüéâ Test d\'insertion automatique termin√© !');
    console.log('üí° Les donn√©es saisies dans l\'application sont maintenant automatiquement sauvegard√©es dans PostgreSQL.');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  }
}

// Attendre que le serveur d√©marre
setTimeout(testInsertion, 3000);



