import express from 'express';
import { pool } from '../config/database.js';
import { authenticateToken, requireAdmin } from '../middleware/auth.js';
import ExcelJS from 'exceljs';

const router = express.Router();

// Get dashboard analytics (admin only)
router.get('/dashboard', authenticateToken, requireAdmin, async (req, res) => {
  try {
    // Get task statistics
    const taskStats = await pool.query(`
      SELECT 
        COUNT(*) as total_tasks,
        COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed_tasks,
        COUNT(CASE WHEN status = 'in_progress' THEN 1 END) as in_progress_tasks,
        COUNT(CASE WHEN due_date < CURRENT_DATE AND status != 'completed' THEN 1 END) as overdue_tasks
      FROM tasks
    `);

    // Get user statistics
    const userStats = await pool.query(`
      SELECT 
        COUNT(*) as total_users,
        COUNT(CASE WHEN is_active = true THEN 1 END) as active_users,
        COUNT(CASE WHEN role = 'admin' THEN 1 END) as admin_users
      FROM users
    `);

    // Get recent activity
    const recentTasks = await pool.query(`
      SELECT t.id, t.title, u.name as assignee_name, t.status, t.created_at
      FROM tasks t
      JOIN users u ON t.assignee_id = u.id
      ORDER BY t.updated_at DESC
      LIMIT 5
    `);

    res.json({
      taskStats: taskStats.rows[0],
      userStats: userStats.rows[0],
      recentActivity: recentTasks.rows
    });
  } catch (error) {
    console.error('Analytics error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Get user dashboard analytics
router.get('/user-dashboard', authenticateToken, async (req: any, res) => {
  try {
    const userStats = await pool.query(`
      SELECT 
        COUNT(*) as total_tasks,
        COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed_tasks,
        COUNT(CASE WHEN status = 'in_progress' THEN 1 END) as in_progress_tasks,
        COUNT(CASE WHEN due_date < CURRENT_DATE AND status != 'completed' THEN 1 END) as overdue_tasks
      FROM tasks
      WHERE assignee_id = $1
    `, [req.user.id]);

    res.json({
      userStats: userStats.rows[0]
    });
  } catch (error) {
    console.error('User analytics error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Export Excel report with organized tables (admin only)
router.get('/report', authenticateToken, requireAdmin, async (req, res) => {
  try {
    console.log('Starting Excel report generation with ExcelJS...');
    
    // Create a new workbook
    const workbook = new ExcelJS.Workbook();
    workbook.creator = 'TaskForge Management System';
    workbook.created = new Date();
    console.log('Workbook created');

    // 0. COVER SHEET WITH COMPANY BRANDING
    const coverSheet = workbook.addWorksheet('Cover');
    
    // Add cover content
    coverSheet.addRow(['']);
    coverSheet.addRow(['']);
    coverSheet.addRow(['', 'TASKFORGE']);
    coverSheet.addRow(['', 'COMPREHENSIVE REPORT']);
    coverSheet.addRow(['']);
    coverSheet.addRow(['']);
    coverSheet.addRow(['Report Generated:', new Date().toLocaleDateString('en-US', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })]);
    coverSheet.addRow(['']);
    coverSheet.addRow(['', 'This report contains:']);
    coverSheet.addRow(['', '• Task Overview and Management']);
    coverSheet.addRow(['', '• User Management and Departments']);
    coverSheet.addRow(['', '• Statistics and Analytics']);
    coverSheet.addRow(['', '• Task Comments and Feedback']);
    coverSheet.addRow(['']);
    coverSheet.addRow(['', 'Generated by TaskForge Management System']);
    
    // Style cover sheet
    coverSheet.getColumn(1).width = 30;
    coverSheet.getColumn(2).width = 50;
    
    // Style the TASKFORGE title
    const titleCell = coverSheet.getCell('B3');
    titleCell.font = { bold: true, size: 24, color: { argb: 'FF2E86AB' } };
    titleCell.alignment = { horizontal: 'center', vertical: 'middle' };
    
    // Style the subtitle
    const subtitleCell = coverSheet.getCell('B4');
    subtitleCell.font = { bold: true, size: 16, color: { argb: 'FF6C757D' } };
    subtitleCell.alignment = { horizontal: 'center', vertical: 'middle' };
    
    // Style the report generated date
    const dateCell = coverSheet.getCell('A7');
    dateCell.font = { bold: true, color: { argb: 'FF495057' } };
    
    // Style bullet points
    for (let i = 9; i <= 12; i++) {
      const cell = coverSheet.getCell(`B${i}`);
      cell.font = { size: 12, color: { argb: 'FF6C757D' } };
    }
    
    // Style footer
    const footerCell = coverSheet.getCell('B14');
    footerCell.font = { italic: true, size: 10, color: { argb: 'FFADB5BD' } };
    footerCell.alignment = { horizontal: 'center', vertical: 'middle' };
    
    console.log('Cover sheet added with professional branding');

    // 1. TASK OVERVIEW TABLE WITH DETAILED INFORMATION
    console.log('Fetching task overview...');
    const taskOverview = await pool.query(`
      SELECT 
        t.id as "Task ID",
        t.title as "Task Title",
        t.description as "Description",
        CASE 
          WHEN t.status = 'not_started' THEN 'Not Started'
          WHEN t.status = 'in_progress' THEN 'In Progress'
          WHEN t.status = 'completed' THEN 'Completed'
          ELSE t.status
        END as "Status",
        CASE 
          WHEN t.priority = 'low' THEN 'Low'
          WHEN t.priority = 'medium' THEN 'Medium'
          WHEN t.priority = 'high' THEN 'High'
          ELSE t.priority
        END as "Priority",
        COALESCE(u1.name, 'Unassigned') as "Assigned To",
        COALESCE(u1.email, 'N/A') as "Assignee Email",
        COALESCE(u1.department, 'N/A') as "Assignee Department",
        COALESCE(u2.name, 'System') as "Assigned By",
        COALESCE(u2.email, 'N/A') as "Assigner Email",
        TO_CHAR(t.due_date, 'DD/MM/YYYY') as "Due Date",
        TO_CHAR(t.created_at, 'DD/MM/YYYY HH24:MI') as "Created Date",
        TO_CHAR(t.updated_at, 'DD/MM/YYYY HH24:MI') as "Last Updated",
        CASE 
          WHEN t.due_date < CURRENT_DATE AND t.status != 'completed' THEN 'Overdue'
          WHEN t.due_date = CURRENT_DATE AND t.status != 'completed' THEN 'Due Today'
          WHEN t.due_date > CURRENT_DATE AND t.status != 'completed' THEN 'Upcoming'
          ELSE 'Completed'
        END as "Timeline Status"
      FROM tasks t
      LEFT JOIN users u1 ON t.assignee_id = u1.id
      LEFT JOIN users u2 ON t.assigner_id = u2.id
      ORDER BY t.created_at DESC
    `);
    console.log(`Found ${taskOverview.rows.length} tasks`);

    // Create Tasks sheet with ExcelJS
    const taskSheet = workbook.addWorksheet('Tasks Overview');
    
    // Add headers
    const headers = [
      'Task ID', 'Task Title', 'Description', 'Status', 'Priority',
      'Assigned To', 'Assignee Email', 'Assignee Department', 'Assigned By', 'Assigner Email',
      'Due Date', 'Created Date', 'Last Updated', 'Timeline Status'
    ];
    taskSheet.addRow(headers);
    
    // Add data rows
    taskOverview.rows.forEach(row => {
      taskSheet.addRow([
        row['Task ID'],
        row['Task Title'],
        row['Description'],
        row['Status'],
        row['Priority'],
        row['Assigned To'],
        row['Assignee Email'],
        row['Assignee Department'],
        row['Assigned By'],
        row['Assigner Email'],
        row['Due Date'],
        row['Created Date'],
        row['Last Updated'],
        row['Timeline Status']
      ]);
    });
    
    // Set column widths
    taskSheet.columns = [
      { width: 8 },  // Task ID
      { width: 25 }, // Task Title
      { width: 40 }, // Description
      { width: 15 }, // Status
      { width: 12 }, // Priority
      { width: 20 }, // Assigned To
      { width: 25 }, // Assignee Email
      { width: 15 }, // Assignee Department
      { width: 20 }, // Assigned By
      { width: 25 }, // Assigner Email
      { width: 12 }, // Due Date
      { width: 18 }, // Created Date
      { width: 18 }, // Last Updated
      { width: 15 }  // Timeline Status
    ];
    
    // Style header row
    const headerRow = taskSheet.getRow(1);
    headerRow.font = { bold: true, color: { argb: 'FFFFFFFF' } };
    headerRow.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF2E86AB' } };
    headerRow.alignment = { horizontal: 'center', vertical: 'middle' };
    headerRow.height = 25;
    
    // Add borders to header
    headerRow.eachCell((cell, colNumber) => {
      cell.border = {
        top: { style: 'thin', color: { argb: 'FF1E5F8C' } },
        left: { style: 'thin', color: { argb: 'FF1E5F8C' } },
        bottom: { style: 'thin', color: { argb: 'FF1E5F8C' } },
        right: { style: 'thin', color: { argb: 'FF1E5F8C' } }
      };
    });
    
    // Style data rows with alternating colors
    for (let i = 2; i <= taskSheet.rowCount; i++) {
      const row = taskSheet.getRow(i);
      const isEven = i % 2 === 0;
      
      row.fill = { 
        type: 'pattern', 
        pattern: 'solid', 
        fgColor: { argb: isEven ? 'FFF8F9FA' : 'FFFFFFFF' } 
      };
      
      row.alignment = { vertical: 'top', wrapText: true };
      row.height = 20;
      
      // Add borders to data cells
      row.eachCell((cell, colNumber) => {
        cell.border = {
          top: { style: 'thin', color: { argb: 'FFE9ECEF' } },
          left: { style: 'thin', color: { argb: 'FFE9ECEF' } },
          bottom: { style: 'thin', color: { argb: 'FFE9ECEF' } },
          right: { style: 'thin', color: { argb: 'FFE9ECEF' } }
        };
      });
    }
    
    console.log('Task sheet added with professional styling');

    // 2. USER MANAGEMENT TABLE
    console.log('Fetching user overview...');
    const userOverview = await pool.query(`
      SELECT 
        u.name as "Full Name",
        u.email as "Email Address",
        u.department as "Department",
        CASE 
          WHEN u.role = 'admin' THEN 'Administrator'
          WHEN u.role = 'user' THEN 'Employee'
          ELSE u.role
        END as "Role",
        CASE 
          WHEN u.is_active = true THEN 'Active'
          ELSE 'Inactive'
        END as "Status",
        TO_CHAR(u.created_at, 'DD/MM/YYYY') as "Join Date"
      FROM users u
      ORDER BY u.created_at DESC
    `);
    console.log(`Found ${userOverview.rows.length} users`);

    // Create Users sheet with ExcelJS
    const userSheet = workbook.addWorksheet('Users Management');
    
    // Add headers
    const userHeaders = ['Full Name', 'Email Address', 'Department', 'Role', 'Status', 'Join Date'];
    userSheet.addRow(userHeaders);
    
    // Add data rows
    userOverview.rows.forEach(row => {
      userSheet.addRow([
        row['Full Name'],
        row['Email Address'],
        row['Department'],
        row['Role'],
        row['Status'],
        row['Join Date']
      ]);
    });
    
    // Set column widths
    userSheet.columns = [
      { width: 25 }, // Full Name
      { width: 30 }, // Email Address
      { width: 15 }, // Department
      { width: 15 }, // Role
      { width: 12 }, // Status
      { width: 18 }  // Join Date
    ];
    
    // Style header row
    const userHeaderRow = userSheet.getRow(1);
    userHeaderRow.font = { bold: true, color: { argb: 'FFFFFFFF' } };
    userHeaderRow.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF28A745' } };
    userHeaderRow.alignment = { horizontal: 'center', vertical: 'middle' };
    userHeaderRow.height = 25;
    
    // Add borders to header
    userHeaderRow.eachCell((cell, colNumber) => {
      cell.border = {
        top: { style: 'thin', color: { argb: 'FF1E7E34' } },
        left: { style: 'thin', color: { argb: 'FF1E7E34' } },
        bottom: { style: 'thin', color: { argb: 'FF1E7E34' } },
        right: { style: 'thin', color: { argb: 'FF1E7E34' } }
      };
    });
    
    // Style data rows with alternating colors
    for (let i = 2; i <= userSheet.rowCount; i++) {
      const row = userSheet.getRow(i);
      const isEven = i % 2 === 0;
      
      row.fill = { 
        type: 'pattern', 
        pattern: 'solid', 
        fgColor: { argb: isEven ? 'FFF8F9FA' : 'FFFFFFFF' } 
      };
      
      row.alignment = { vertical: 'center' };
      row.height = 20;
      
      // Add borders to data cells
      row.eachCell((cell, colNumber) => {
        cell.border = {
          top: { style: 'thin', color: { argb: 'FFE9ECEF' } },
          left: { style: 'thin', color: { argb: 'FFE9ECEF' } },
          bottom: { style: 'thin', color: { argb: 'FFE9ECEF' } },
          right: { style: 'thin', color: { argb: 'FFE9ECEF' } }
        };
      });
    }
    
    console.log('User sheet added with professional styling');

    // 3. STATISTICS SUMMARY TABLE
    console.log('Fetching statistics...');
    const taskStats = await pool.query(`
      SELECT 
        COUNT(*) as "Total Tasks",
        COUNT(CASE WHEN status = 'completed' THEN 1 END) as "Completed Tasks",
        COUNT(CASE WHEN status = 'in_progress' THEN 1 END) as "In Progress Tasks",
        COUNT(CASE WHEN status = 'not_started' THEN 1 END) as "Not Started Tasks",
        COUNT(CASE WHEN due_date < CURRENT_DATE AND status != 'completed' THEN 1 END) as "Overdue Tasks"
      FROM tasks
    `);

    const userStats = await pool.query(`
      SELECT 
        COUNT(*) as "Total Users",
        COUNT(CASE WHEN is_active = true THEN 1 END) as "Active Users",
        COUNT(CASE WHEN role = 'admin' THEN 1 END) as "Administrators",
        COUNT(CASE WHEN role = 'user' THEN 1 END) as "Employees"
      FROM users
    `);

    // Create Statistics sheet with ExcelJS
    const summarySheet = workbook.addWorksheet('Statistics Summary');
    
    // Add headers
    summarySheet.addRow(['Metric', 'Value']);
    
    // Add statistics data
    summarySheet.addRow(['Total Tasks', taskStats.rows[0]["Total Tasks"]]);
    summarySheet.addRow(['Completed Tasks', taskStats.rows[0]["Completed Tasks"]]);
    summarySheet.addRow(['In Progress Tasks', taskStats.rows[0]["In Progress Tasks"]]);
    summarySheet.addRow(['Not Started Tasks', taskStats.rows[0]["Not Started Tasks"]]);
    summarySheet.addRow(['Overdue Tasks', taskStats.rows[0]["Overdue Tasks"]]);
    summarySheet.addRow(['', '']); // Empty row
    summarySheet.addRow(['Total Users', userStats.rows[0]["Total Users"]]);
    summarySheet.addRow(['Active Users', userStats.rows[0]["Active Users"]]);
    summarySheet.addRow(['Administrators', userStats.rows[0]["Administrators"]]);
    summarySheet.addRow(['Employees', userStats.rows[0]["Employees"]]);
    
    // Set column widths
    summarySheet.columns = [
      { width: 25 }, // Metric
      { width: 15 }  // Value
    ];
    
    // Style header row
    const summaryHeaderRow = summarySheet.getRow(1);
    summaryHeaderRow.font = { bold: true, color: { argb: 'FFFFFFFF' } };
    summaryHeaderRow.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF6F42C1' } };
    summaryHeaderRow.alignment = { horizontal: 'center', vertical: 'middle' };
    summaryHeaderRow.height = 25;
    
    // Add borders to header
    summaryHeaderRow.eachCell((cell, colNumber) => {
      cell.border = {
        top: { style: 'thin', color: { argb: 'FF5A2D91' } },
        left: { style: 'thin', color: { argb: 'FF5A2D91' } },
        bottom: { style: 'thin', color: { argb: 'FF5A2D91' } },
        right: { style: 'thin', color: { argb: 'FF5A2D91' } }
      };
    });
    
    // Style data rows
    for (let i = 2; i <= summarySheet.rowCount; i++) {
      const row = summarySheet.getRow(i);
      const isEven = i % 2 === 0;
      const isEmptyRow = row.getCell(1).value === '';
      
      if (!isEmptyRow) {
        row.fill = { 
          type: 'pattern', 
          pattern: 'solid', 
          fgColor: { argb: isEven ? 'FFF8F9FA' : 'FFFFFFFF' } 
        };
        
        // Make metric names bold
        row.getCell(1).font = { bold: true };
      }
      
      row.alignment = { horizontal: isEmptyRow ? 'center' : 'left', vertical: 'center' };
      row.height = 20;
      
      // Add borders to data cells
      row.eachCell((cell, colNumber) => {
        cell.border = {
          top: { style: 'thin', color: { argb: 'FFE9ECEF' } },
          left: { style: 'thin', color: { argb: 'FFE9ECEF' } },
          bottom: { style: 'thin', color: { argb: 'FFE9ECEF' } },
          right: { style: 'thin', color: { argb: 'FFE9ECEF' } }
        };
      });
    }
    
    console.log('Summary sheet added with professional styling');

    // 4. TASK COMMENTS AND FEEDBACK
    console.log('Fetching task comments...');
    let commentsOverview;
    try {
      commentsOverview = await pool.query(`
        SELECT 
          t.id as "Task ID",
          t.title as "Task Title",
          u.name as "Commenter Name",
          u.email as "Commenter Email",
          u.department as "Commenter Department",
          c.comment_text as "Comment",
          TO_CHAR(c.created_at, 'DD/MM/YYYY HH24:MI') as "Comment Date"
        FROM comments c
        JOIN tasks t ON c.task_id = t.id
        JOIN users u ON c.user_id = u.id
        ORDER BY c.created_at DESC
      `);
    } catch (error) {
      // If comments table doesn't exist or has no data, create empty result
      commentsOverview = { rows: [] };
    }

    // Create Comments sheet with ExcelJS
    const commentsSheet = workbook.addWorksheet('Task Comments');
    
    // Add headers
    const commentHeaders = ['Task ID', 'Task Title', 'Commenter Name', 'Commenter Email', 'Commenter Department', 'Comment', 'Comment Date'];
    commentsSheet.addRow(commentHeaders);
    
    // Add data rows
    commentsOverview.rows.forEach(row => {
      commentsSheet.addRow([
        row['Task ID'],
        row['Task Title'],
        row['Commenter Name'],
        row['Commenter Email'],
        row['Commenter Department'],
        row['Comment'],
        row['Comment Date']
      ]);
    });
    
    // Set column widths
    commentsSheet.columns = [
      { width: 8 },  // Task ID
      { width: 25 }, // Task Title
      { width: 20 }, // Commenter Name
      { width: 25 }, // Commenter Email
      { width: 15 }, // Commenter Department
      { width: 50 }, // Comment
      { width: 18 }  // Comment Date
    ];
    
    // Style header row
    const commentHeaderRow = commentsSheet.getRow(1);
    commentHeaderRow.font = { bold: true, color: { argb: 'FFFFFFFF' } };
    commentHeaderRow.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFD7E14' } };
    commentHeaderRow.alignment = { horizontal: 'center', vertical: 'middle' };
    commentHeaderRow.height = 25;
    
    // Add borders to header
    commentHeaderRow.eachCell((cell, colNumber) => {
      cell.border = {
        top: { style: 'thin', color: { argb: 'FFE55A00' } },
        left: { style: 'thin', color: { argb: 'FFE55A00' } },
        bottom: { style: 'thin', color: { argb: 'FFE55A00' } },
        right: { style: 'thin', color: { argb: 'FFE55A00' } }
      };
    });
    
    // Style data rows with alternating colors
    for (let i = 2; i <= commentsSheet.rowCount; i++) {
      const row = commentsSheet.getRow(i);
      const isEven = i % 2 === 0;
      
      row.fill = { 
        type: 'pattern', 
        pattern: 'solid', 
        fgColor: { argb: isEven ? 'FFF8F9FA' : 'FFFFFFFF' } 
      };
      
      row.alignment = { vertical: 'top', wrapText: true };
      row.height = 20;
      
      // Add borders to data cells
      row.eachCell((cell, colNumber) => {
        cell.border = {
          top: { style: 'thin', color: { argb: 'FFE9ECEF' } },
          left: { style: 'thin', color: { argb: 'FFE9ECEF' } },
          bottom: { style: 'thin', color: { argb: 'FFE9ECEF' } },
          right: { style: 'thin', color: { argb: 'FFE9ECEF' } }
        };
      });
    }

    console.log('Comments sheet added with professional styling');

    // Generate Excel file with ExcelJS
    console.log('Generating Excel file with ExcelJS...');
    const buffer = await workbook.xlsx.writeBuffer();
    console.log(`Excel file generated, size: ${buffer.length} bytes`);
    
    const filename = `TaskForge-Report-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.xlsx`;
    
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.send(buffer);
    console.log('Excel report sent successfully');
  } catch (error) {
    console.error('Excel report generation error:', error);
    res.status(500).json({ error: 'Failed to generate Excel report', details: error.message });
  }
});

export default router;